# -*- coding: utf-8 -*-
"""uji 0.3 tanpa tuning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gLQ82GYqw5StDxy1zt0PKmUnkW2n0Dno
"""

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import numpy as np

from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split #Library untuk memisahkan dataset menjadi train dan test
from sklearn.naive_bayes import CategoricalNB #Import Library untuk GaussianNaiveBayes
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, accuracy_score #Import Library untuk Confusion Matrix dan Accuracy (sejenis evaluasi)
from sklearn.metrics import classification_report #Import Library untuk TINGKAT_KEification Report (sejenis evaluasi)
from sklearn.metrics import roc_curve #Import Library untuk ROC Curve (sejenis evaluasi)

das = pd.read_csv('/content/DATA TA TIARA.csv')
print(das)

"""## Informasi Data"""

das.info()

#Tampilan Data 5 terakhir
das.tail(5)

"""## Cleaning Data"""

#Mengambil data yang diperlukan pada kasus ini Kabupaten Semarang yang akan diambil.
das_sem = das[das["KABUPATEN"] == "Semarang"]
das_sem

#Mengambil data di Kabupaten Semarang yang berada Dalam KAWASAN
das_sema = das_sem[das_sem["KAWASAN"] == "Dalam Kawasan"]
das_sema

"""## Data Selection"""

# Membuang kolom yang tidak diperlukan, yaitu terdapat 14 kolom yang tidak akan digunakan
#['WIL_KERJA', 'KETERANGAN', 'PENUTUPAN', 'SKOR_VEG', 'SKOR_PRD', 'KEMIRINGAN', 'SKOR_LER', 'SKOR_EROSI', 'FUNGSI', 'SKOR_MNJ', 'TOTAL_SKOR', 'LUAS', 'LUAS_HA',' KELILING']
dropped_columns = ["WIL_KERJA", "KETERANGAN", "PENUTUPAN", "SKOR_VEG", "SKOR_PRD", "KEMIRINGAN", "SKOR_LER", "SKOR_EROSI", "FUNGSI", "SKOR_MNJ", "TOTAL_SKOR", "LUAS", "LUAS_HA", "KELILING", "KAWASAN", "NAMA_DAS", "KABUPATEN", "KECAMATAN", "DESA", "KELAS_MNJ"]
das_sema = das_sema.drop(dropped_columns, axis=1)

dropped_columns = ["ID"]
das_sema = das_sema.drop(dropped_columns, axis=1)

das_sema

missing_values = das_sema.isnull().sum()
print(missing_values)

"""### Menjawab Rumusan Masalah Terkait Gambaran Umum Daerah Aliran Sungai Pemali Jratun di Kabupaten Semarang"""

#Menambahkan library untuk visualisasi data
import plotly.figure_factory as ff
import plotly.express as px

fig = px.bar(das_sema['KELAS_VEG'].value_counts(),
        title ="Melihat Data Kelas Vegetasi")
fig.show()

# Calculate count of each category
category_counts = das_sema['KELAS_VEG'].value_counts()

# Create pie chart
fig = px.pie(category_counts, values=category_counts.values, names=category_counts.index, title="Melihat Data Kelas Vegetasi (Penutupan Lahan)")

# Show the pie chart
fig.show()

fig = px.bar(das_sema['KELAS_PRD'].value_counts(),
        title ="Melihat Data Kelas Produktivitas")
fig.show()

# Calculate count of each category
category_counts = das_sema['KELAS_PRD'].value_counts()

# Create pie chart
fig = px.pie(category_counts, values=category_counts.values, names=category_counts.index, title="Melihat Data Kelas Produktivitas")

# Show the pie chart
fig.show()

fig = px.bar(das_sema['KELAS_LERE'].value_counts(),
        title ="Melihat Data Kelas Lereng")
fig.show()

# Calculate count of each category
category_counts = das_sema['KELAS_LERE'].value_counts()

# Create pie chart
fig = px.pie(category_counts, values=category_counts.values, names=category_counts.index, title="Melihat Data Kelas Lereng")

# Show the pie chart
fig.show()

fig = px.bar(das_sema['KELAS_EROS'].value_counts(),
        title ="Melihat Data Kelas Erosi")
fig.show()

# Calculate count of each category
category_counts = das_sema['KELAS_EROS'].value_counts()

# Create pie chart
fig = px.pie(category_counts, values=category_counts.values, names=category_counts.index, title="Melihat Data Kelas Tingkat Bahaya Erosi")

# Show the pie chart
fig.show()

# Calculate count of each category
category_counts = das_sema['KELAS_PRD'].value_counts()

# Create pie chart
fig = px.pie(category_counts, values=category_counts.values, names=category_counts.index, title="Melihat Data Kelas Produktivitas")

# Show the pie chart
fig.show()

"""## Data Transformasi"""

das_sema.loc[das_sema['KELAS_VEG'] == 'Sangat Baik', 'KELAS_VEG'] = 4
das_sema.loc[das_sema['KELAS_VEG'] == 'Baik', 'KELAS_VEG'] = 3
das_sema.loc[das_sema['KELAS_VEG'] == 'Sedang', 'KELAS_VEG'] = 2
das_sema.loc[das_sema['KELAS_VEG'] == 'Buruk', 'KELAS_VEG'] = 1
das_sema.loc[das_sema['KELAS_VEG'] == 'Sangat Buruk', 'KELAS_VEG'] = 0

das_sema.loc[das_sema['KELAS_PRD'] == 'Sangat Tinggi', 'KELAS_PRD'] = 4
das_sema.loc[das_sema['KELAS_PRD'] == 'Tinggi', 'KELAS_PRD'] = 3
das_sema.loc[das_sema['KELAS_PRD'] == 'Sedang', 'KELAS_PRD'] = 2
das_sema.loc[das_sema['KELAS_PRD'] == 'Rendah', 'KELAS_PRD'] = 1
das_sema.loc[das_sema['KELAS_PRD'] == 'Sangat Rendah', 'KELAS_PRD'] = 0

das_sema.loc[das_sema['KELAS_LERE'] == 'Datar', 'KELAS_LERE'] = 4
das_sema.loc[das_sema['KELAS_LERE'] == 'Landai', 'KELAS_LERE'] = 3
das_sema.loc[das_sema['KELAS_LERE'] == 'Agak Curam', 'KELAS_LERE'] = 2
das_sema.loc[das_sema['KELAS_LERE'] == 'Curam', 'KELAS_LERE'] = 1
das_sema.loc[das_sema['KELAS_LERE'] == 'Sangat Curam', 'KELAS_LERE'] = 0


das_sema.loc[das_sema['KELAS_EROS'] == 'Sangat Ringan', 'KELAS_EROS'] = 4
das_sema.loc[das_sema['KELAS_EROS'] == 'Ringan', 'KELAS_EROS'] = 3
das_sema.loc[das_sema['KELAS_EROS'] == 'Sedang', 'KELAS_EROS'] = 2
das_sema.loc[das_sema['KELAS_EROS'] == 'Berat', 'KELAS_EROS'] = 1
das_sema.loc[das_sema['KELAS_EROS'] == 'Sangat Berat', 'KELAS_EROS'] = 0


das_sema.loc[das_sema['TINGKAT_KE'] == 'Kritis', 'TINGKAT_KE'] = 3
das_sema.loc[das_sema['TINGKAT_KE'] == 'Agak Kritis', 'TINGKAT_KE'] = 2
das_sema.loc[das_sema['TINGKAT_KE'] == 'Potensial Kritis', 'TINGKAT_KE'] = 1
das_sema.loc[das_sema['TINGKAT_KE'] == 'Tidak Kritis', 'TINGKAT_KE'] = 0

das_sema = das_sema.apply(pd.to_numeric, errors='coerce')
das_sema

"""## Data Mining (Proses Pemodelan)"""

# Variabel independen
x = das_sema.drop(["TINGKAT_KE"], axis = 1)
x.head()

# Variabel dependen
y = das_sema["TINGKAT_KE"]
y.head()

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
clf = GaussianNB()

# Pisahkan atribut untuk training & test
x_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)

# Membuat model Naive Bayes terhadap Training set
model = GaussianNB()
model.fit(x_train, y_train)

# Memprediksi hasil test set
y_pred = model.predict(X_test)
y_pred

"""## Evaluasi Model dengan Confusion Matrix"""

# Menghitung tingkat akurasi
accuracy_score(y_test, y_pred)

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

"""## Visualisasi Data

# NYOBA VISUALISASI DATA KAYA KANG ESOR TAPI ISUN BELI BISA BACAE
"""

# Menggabungkan fitur dan target
das_sema = pd.concat([x, y], axis=1)

# Membuat pairplot untuk melihat hubungan fitur-fitur
sns.pairplot(das_sema, hue='TINGKAT_KE')

# Menampilkan diagram
plt.show()